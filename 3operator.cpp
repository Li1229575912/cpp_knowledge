// 运算符 Operator

// +-*/% ^ & < >
//运算符也叫操作符，可实现各种数值或逻辑的运算，键盘上很多非字母非数字的符号，都被用来当作C++的运算符
// 对于基本类型 这些运算符有固定含义，但对于类和对象，这些运算符可能会被重载，也就是重新定义

//赋值运算符 = 
/*
赋值运算符就是将右边的数值或变量赋值给左边的变量 a = 3;
当一条语句中存在多个赋值运算符时。运算顺序是从右向左 a = b = 3;
 */

// 需要几个数运算就是几元运算符

// 算术运算符 + - * / % （加减乘除模）
// 算术运算符需要两个数运算，因此叫做二元运算符
// 算术优先级是先算 乘除取余 再算 加减

// 关系运算符（二元运算符）
// == != > < >= <= 

// 逻辑运算符（表示真假）
// ！ && || 非 与 或

// 复合赋值运算符（=与其他的组合）
// += -= *= /= %= >>= <<= &= |= ^=

// 增量/减量运算符 ++ -- (注意前后区别)
//int a=5,b; b = a++; b = ++a; a++是先赋值再加一，++a是先把a加一再赋值。

// 条件运算符 ？ int res = a > 0 ? 5 : 6;
// （条件表达式）？ 结果1 ： 结果2
// 这需要三个数参与运算，也叫三元运算符

// 类型转换运算符() 下面两种写法相同 
// a = (int)b;
// a = int(b);
// （bool）与其它类型转换，只有是0才代表false 其它都是true，bool（-5）是true

// sizeof运算符（注意sizeof不是函数，编译时替换为常量）
// sz = sizeof（a）;

// 位运算符 （左移 右移 与 或 取反 异或）
// << >> & | ~ ^
// 位运算符是按照每一位运算，按照二进制运算
// a = 6 << 2; // 110 变成 11000 (左移后补0)
// a = 6 >> 1; // 110 变成 11 （也就是3）
// ～a 取反 110 取反变成 001
// 与 1 & 1 是 1 1 & 0 是 0
// 或 1 | 1 是 1 1 | 0 是 1（有一个满足即可）
// 异或 1 ^ 1 是 0 ，1 ^ 0 是 1（相同为0 不同为1）
// 在有些地方会对 << >> 重载， cout<< "hello"; cin >> a; 这里表示的是插入或提取 的操作符

// 其它运算符
// * 间接引用运算符
// -> 指针成员运算符
// . 对象成员运算符
// & 取地址运算符

#include <iostream>

using namespace std;

int main() {
    int a;
    cin >> a;
    for (int i = 0; i < 3; i++)
    {
        switch (i)
        {
        case 0:
            cout << "s=" << a%60 << endl;
            break;
        case 1:
            cout << "m=" << a/60%60 << endl;
            break;
        case 2:
            cout << "h=" << a/60/60%60 << endl;
            break;
        default:
            break;
        }
        
    }
    
    cout << "RESULT=" << a << endl;
}
